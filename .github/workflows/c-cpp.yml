name: C/C++ CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        package_name: [usb_camera, pan_tilt_camera]

    steps:
      - name: Install ROS 2 Foxy packages
        run: |
          sudo apt update && sudo apt install locales
          sudo locale-gen en_US en_US.UTF-8
          sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
          export LANG=en_US.UTF-8
          locale 
          sudo apt update
          sudo apt install -y software-properties-common
          sudo add-apt-repository universe
          sudo apt update && sudo apt install -y curl
          sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
          sudo apt update
          sudo apt upgrade
          sudo apt install -y ros-foxy-base python3-argcomplete
          sudo apt install -y python3-colcon-common-extensions
          sudo apt install -y ros-dev-tools
          sudo apt install -y lcov

      - name: Setup Workspace
        run: |
          source /opt/ros/foxy/setup.bash
          mkdir -p ros_ws/src
          cd ros_ws
          colcon build
          source install/setup.bash
          
      - uses: actions/checkout@v3
        with:
          path: ros_ws/src

      - name: Configure CMake flags and build each package
        run: |
          source /opt/ros/foxy/setup.bash
          sudo apt install python3-rosdep
          sudo rosdep init
          rosdep update --include-eol-distros
          cd ros_ws
          rosdep install --from-paths src -y --ignore-src
          colcon build --packages-select ${{ matrix.package_name }} --cmake-args -DCOVERAGE=1 
          cat log/latest_build/${{ matrix.package_name }}/stdout_stderr.log
          find build/${{ matrix.package_name }}/ | grep -E 'gcno' # catch error -- expect to see .gcno files

      - name: Save build result
        if: ${{ success() }}
        run: echo "${{ matrix.package_name }} build succeeded" > build_status_${{ matrix.package_name }}.txt

      - name: Save build result (failure)
        if: ${{ failure() }}
        run: echo "${{ matrix.package_name }} build failed" > build_status_${{ matrix.package_name }}.txt
